1. В первом варианте массива ["john","jane","alex"]; в нем значения являются элементами массива являются сами данные. 
А во втором варианте  массива 
[
  ["name"⇒"John"],
  ["name"⇒"Jane"]
];
в нем элементами массива являются поля, к которым присваиваются значения. Соответственно при обращении к такому массиву в цикле foreach мы обращаемся к полю name из которого мы считываем его значение. А в первом варианте массива у нас так бы не получилось сделать.

2. При добавлении нового элемента мы можем добавлять новый элемент в уже имеющуюся структуру. Переделывание структуры и добавление полей возможно только при создании массива. Чтобы поменять структуру массива, нам нужно пересоздать массив целиком.

3. Смотря на верстку мы ищем повторяющиеся элементы в верстке (например id, название товара, цена, цвет, размер и т.д.) и из них создаем массив из полей, в которые потом записываем значения. И затем создаем цикл и оборачиваем в него один повторяющийся блок верстки, в котором выводим значения, записанные в поля массива. А другие повторяющиеся блоки верстки удаляем. Таким образом это позволяет выводить на сайте информацию об однотипных данных, например карточках товаров, характеристики которых записаны в поля массива. Самих карточек товаров может быть сколько угодно много и они будут выводиться на сайте динамически.

4. Для вывода списка важно чтобы структура html блока была единой, чтобы выводить повторяющиеся значения полей массива из списка. Если структура html блока будет не единой, а разной, то придется использовать условия, часть элементов скрывать, а часть элементов показывать. А это усложняет код программы.

5. Проанализирую список элементов и создаю массив из полей элементов. Одними из полей будут наличие стией у элемента списка и значение padding. Далее в коде проверяю условие, если у элемента списка. Если присутствует наличие стилей, то смотрю значение padding и далее подставляю значение paddinп в код. Если у элемента списка отсутствует ниличие стилей, то подставление значения padding в код не производится.

6. Вариант кода 
foreach($items as $item) {

}
используется в основном тогда, когда содержимое фигурных скобок содержит только php код.
А вариант кода 
foreach($items as $item):

endforeach;
используется, когда между foreach и endforeach присутствует html код. Чтобы вывести html код внутри фигурных скобок, нам нужно обернуть его в echo.

7. Тернарный оператор в своей работе мы использовали в задании taks_8.php в цикле:

<?php foreach($links as $link):?>
	<?php if($link['is_link']):?> 
		<li class="breadcrumb-item"><a href="<?php echo $link['href'];?>"><?php echo $link['title'];?></a></li>
    <?php else:?>
		<li class="breadcrumb-item active"><?php echo $link['title'];?></li>
    <?php endif;?>
<?php endforeach;?> 

Такой подход мы использовали, так как в условиях if и else всего по одному действию. А еще такой подход ведет к сокращению кода, так как мы не использовали скобки и упрощению читаемости.